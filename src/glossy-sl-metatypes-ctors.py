#!/usr/bin/python
#
# Copyright 2012 Google, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Google Author(s): Behdad Esfahbod

#
# m is the number of remaining items to fill
# orig_m is the total number of items to fill
# mm is the original size of the object in each dimension
# ie. for a mat4, orig_m is 16, and mm is 4.
def partition (name, m, args, orig_m, mm, limited = False):
	if m <= 0:
		a = []
		b = []
		n = 0
		for i, j in enumerate (args):
			if j == 1:
				a.append ("T v%d" % i)
				b.append ("v[%d]=v%d" % (n, i))
				n += 1
			else:
				a.append ("const vec<T,%d> &v%d" % (j, i))
				# If we're vector-aligned, use vector assignment
				if j == mm and n % mm == 0:
					if orig_m == mm:
						# vec
						b.append ("*this=v%d" % i)
					else:
						# mat
						b.append ("*this[%d]=v%d" % (n / mm, i))
				else:
					for k in range (j):
						if n < orig_m:
							b.append ("v[%d]=v%d[%d]" % (n, i, k))
							n += 1

		print "	inline %s (%s) \\" % (name, ', '.join (a))
		print "	{ %s } \\" % ''.join (x+";" for x in b)
		return
	for j in range (1, 5):
		if limited:
			# No arg can populate across column boundaries
			if (m - 1) / mm != (m - j) / mm:
				continue
		partition (name, m - j, args + [j], orig_m, mm, limited)

print "/* Generated by ctors.py.  Do not modify */"
print "#ifndef GLOSSY_SL_METATYPES_CTORS_HH"
print "#define GLOSSY_SL_METATYPES_CTORS_HH"
print
for m in range (2, 5):
	print
	print "#define GLOSSY_SL_METATYPES_CTORS_VEC%d \\" % m
	partition ("vec<T,%d>" % m, m, [], m, m)
	print "	/**/"
print
for m in range (2, 5):
	print
	print "#define GLOSSY_SL_METATYPES_CTORS_MAT%d \\" % m
	# For mat4 we can't afford full set of constructors.  Compromise.
	partition ("mat<T,%d>" % m, m * m, [], m * m, m, m >= 4)
	print "	/**/"
print
print "#endif /* GLOSSY_SL_METATYPES_CTORS_HH */"
